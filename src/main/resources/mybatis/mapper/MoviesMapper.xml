<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.mapper.MoviesMapper">

    <!--Mybatis框架在通过spring-db.xml中的mapperLocations属性指定的路径中得到映射文件的路径以后，会全部加载并解析这些映射文件-->
    <!--上述这个动作实际上是Mybatis通过Spring完成的-->
    <!--接下来它会把这个映射文件根据命名空间的声明，找到对应的Mapper接口，将各个SQL的id与Mapper接口中的各个方法对应上-->

    <select id="findById" resultType="Movie">
        select * from movie where id = #{id}
    </select>

    <select id="findAll" resultType="Movie">
        select * from movie where state=1
    </select>

    <insert id="insertMovie" parameterType="Movie">
        insert into movie values(null,#{title},#{description},#{detail},#{path},#{state},now(),null,0)
    </insert>

    <update id="deleteMovie" >
        update movie set state=0,modified_time=NOW() where id =#{id}
    </update>

    <delete id="deleteCategoryByMovies">
        delete from movie_category where movie_id=#{id}
    </delete>

    <update id="updateMovie" parameterType="Movie">
        update movie set title=#{title},detail=#{detail},description=#{description},state=#{state},modified_time=NOW() where id=#{id}
    </update>

    <select id="findByTitle" parameterType="java.lang.String" resultType="Movie">
        select * from movie where title
        <if test="title != null ">
            like #{title}
        </if>
    </select>

    <select id="findByCategory" parameterType="list" resultType="Movie">
        select m.* from movie m
            left join movie_category mc on m.id = mc.movie_id
            <where>
                mc.category_id=#{id}
            </where>
    </select>

</mapper>